{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","username","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.91d54372.chunk.js","sourcesContent":["  \r\nimport React from 'react';\r\n\r\nconst Card = ({ name, email,username, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div className = \" \">\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        <p>{username}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList= ({robots}) =>{\r\n    return(\r\n        <div>\r\n            {\r\n              robots.map((user,i) => {\r\n                  return(\r\n                      <Card\r\n                      key= {i}\r\n                      id = {robots[i].id}\r\n                      name= {robots[i].name}\r\n                      email={robots[i].email}\r\n                      username={robots[i].username}\r\n                      />\r\n                  );\r\n              })  \r\n            }\r\n        </div>\r\n\r\n    ); \r\n}\r\n\r\nexport default CardList\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input\r\n            className = 'pa3 ba b--greem bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots'\r\n            onChange = {searchChange}\r\n            />\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox","  \r\nimport React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '2px solid green', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    } \r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1> Sorry for the inconvenience. We are working on it :( </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n\nclass App extends Component {\n  //state changes and affects the app\n  constructor(){\n    super()//calls constructor of Component since 'this' cant be used before super\n    this.state = {\n      robots: [],\n      searchfield: ''\n\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>{\n      return response.json();\n    })\n    .then(users => {\n      this.setState({robots:users})\n    });\n\n  }\n\n  onSearchChange = (event) =>{\n    this.setState({searchfield: event.target.value })\n  }\n\n  render(){\n    const{robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    if(robots.length === 0){\n      return <h1> Please wait a moment. </h1>\n    }else{\n      return(\n        <div className = 'tc'>\n          <h1 className= 'f1'> Robofriends </h1>\n          <SearchBox searchChange= {this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n          \n        </div>\n    \n      );\n\n    }\n    \n\n  }\n  \n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}